services:
  paperjet:
    image: mlnative/paperjet
    container_name: paperjet
    ports:
      - "3000:3000"
    environment:
      # required
      BASE_URL: "http://127.0.0.1:3000"
      BETTER_AUTH_SECRET: "allyourbasearebelongtous"
      ENVIRONMENT: "prod"
      DATABASE_URL: "postgres://postgres:postgres@postgres:5432/app"
      ML_SERVICE_URL: "http://paperjet-ml:8080"
      REDIS_HOST: "redis"
      REDIS_PASSWORD: ""
      REDIS_PORT: "6379"
      S3_ACCESS_KEY: "app-user"
      S3_BUCKET: "files"
      S3_ENDPOINT: "http://minio:9000"
      S3_SECRET_KEY: "app-secret"
    networks:
      - app-network
    restart: unless-stopped
  paperjet-ml:
    image: mlnative/paperjet-ml
    container_name: paperjet-ml
    networks:
      - app-network
    restart: unless-stopped
  postgres:
    image: postgres:16-alpine
    container_name: paperjet-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    container_name: paperjet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: paperjet-s3
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio-setup:
    image: minio/mc
    container_name: paperjet-s3-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set local http://minio:9000 minioadmin minioadmin &&
      mc mb local/files &&
      mc admin user add local app-user app-secret &&
      echo '
      {
        \"Version\": \"2012-10-17\",
        \"Statement\": [
          {
            \"Action\": [
              \"s3:GetBucketLocation\",
              \"s3:ListBucket\"
            ],
            \"Effect\": \"Allow\",
            \"Resource\": \"arn:aws:s3:::files\"
          },
          {
            \"Action\": [
              \"s3:PutObject\",
              \"s3:GetObject\",
              \"s3:DeleteObject\"
            ],
            \"Effect\": \"Allow\",
            \"Resource\": \"arn:aws:s3:::files/*\"
          }
        ]
      }
      ' > /tmp/files-full-access.json &&
      mc admin policy create local files-full-access /tmp/files-full-access.json &&
      mc admin policy attach local --user app-user --policy files-full-access &&
      echo 'âœ… MinIO setup completed';
      "
    networks:
      - app-network
    restart: "no"

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  app-network:
    driver: bridge
